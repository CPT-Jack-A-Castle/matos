# Project: Matos by CloudMatos (https://www.cloudmatos.com/) - Automate your Cloud Security & Compliance
# Asset: aws-s3
# Licensing: MIT
- name: Block public access on a s3 bucket
  hosts: localhost
  pre_tasks:
    - name: Validate Input
      assert:
        that:
          - aws_access_key is defined
          - aws_secret_key is defined
          - aws_region is defined
          - aws_account_id is defined
          - vault_policy is defined
          - vault_name is defined
  
  vars:
    auth: 'AWS_ACCESS_KEY_ID={{aws_access_key}} AWS_SECRET_ACCESS_KEY={{aws_secret_key}} AWS_DEFAULT_REGION={{aws_region}} '
    account_access:
      Principal:
        AWS: "arn:aws:iam::{{aws_account_id}}:root" 
    new_policy:
      Version: "{{vault_policy.Version}}"
    statement: []
  tasks:
    - block: # Prepare policy
      - name: Set policy id
        set_fact:
          new_policy: "{{ new_policy | (combine({'Id':vault_policy.Id}) }}"
        when: "vault_policy.Id is defined"
      - name: Add condition in the policy statement
        set_fact:
          statement: "{{statement + [item]}}"
        loop: "{{vault_policy.Statement}}"
        when: item.Principal!='*' and (item.Principal.AWS is not defined or item.Principal.AWS!='*') and (item.Principal.CanonicalUser is not defined or item.Principal.CanonicalUser!='*')
      - name: Add condition in the policy statement
        set_fact:
          statement: "{{statement + [item | combine(account_access)]}}"
        loop: "{{vault_policy.Statement}}"
        when: item.Principal=='*' or (item.Principal.AWS is defined and item.Principal.AWS and item.Principal.AWS=='*') or (item.Principal.CanonicalUser is defined and item.Principal.CanonicalUser=='*')
      - name: set updated statement in the policy
        set_fact:
          new_policy: 
            Policy: "{{new_policy | combine({'Statement':statement}) | to_json}}"
      - name: Prepare policy
        debug:
          msg: "{{new_policy}}"
      - name: Update policy
        ansible.builtin.shell:
          cmd: "{{auth}} aws glacier set-vault-access-policy --account-id {{aws_account_id}} --vault-name {{vault_name}} --policy '{{new_policy | to_json}}'"



        